{"version":3,"sources":["Components/Breadcrumb.js","Components/Directory.js","Components/File.js","App.js","reportWebVitals.js","index.js"],"names":["Breadcrumb","breadcrumbData","clickHandler","style","border","display","listStyle","padding","justifyContent","color","textTransform","map","data","i","length","onClick","evnt","cursor","Directory","dirName","dirData","dirKeys","Object","keys","key","type","File","fileName","App","useState","updateData","updateBreadcrumb","BreadcrumbRef","useRef","prevClickedElement","useEffect","current","fetch","join","then","response","json","catch","err","console","log","element","event","clickedElement","target","push","children","className","index","splice","rootDir","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a7a2d561.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Breadcrumb = ({breadcrumbData, clickHandler}) => {\r\n    const style ={\r\n        border: '1px solid #eee',\r\n        display: \"flex\",\r\n        listStyle: 'none',\r\n        padding: '5px',\r\n        justifyContent: 'center',\r\n        color: 'blue',\r\n        textTransform: 'capitalize'\r\n    };\r\n\r\n    return(\r\n        <div>\r\n            <ul style={style}>                \r\n                {breadcrumbData.map((data, i) => {\r\n                    if (i === breadcrumbData.length - 1) {\r\n                        return <li onClick={(evnt) => clickHandler(evnt, i)} style={{cursor: 'pointer'}} key={data}>{data}</li>;\r\n                    }\r\n                    else {\r\n                        return <li style ={{cursor: 'pointer'}} onClick={(evnt) => clickHandler(evnt, i)} key={data}>{data}<span style={{padding: '0px 5px'}}>/</span> </li>\r\n                    }\r\n                })}\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Breadcrumb;","import React from 'react';\r\n\r\nconst Directory = ({dirName, dirData, clickHandler}) => { \r\n    const dirKeys= Object.keys(dirData);\r\n    \r\n    const style={\r\n        cursor: 'pointer',\r\n        color: 'blue'\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h3 style={{textTransform: 'capitalize'}}>\"{dirName}\" directory Content</h3>\r\n            {dirKeys.map(key =>{\r\n                if (dirData[key].type === 'dir') {\r\n                    return <p style={style} onClick={(evnt) => clickHandler(evnt, key)} key={key}>{key}/</p>\r\n                }\r\n                else {\r\n                    return <p style={style} onClick={(evnt) => clickHandler(evnt, key)} key={key}>{key}</p>\r\n                }\r\n            })}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Directory;","import React from 'react';\r\n\r\nconst File = ({fileName}) => { \r\n    return (\r\n        <div>\r\n            <h1>This is File: {fileName}</h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default File;","import React, {useState, useEffect, useRef} from 'react';\nimport Breadcrumb from './Components/Breadcrumb';\nimport Directory from './Components/Directory';\nimport File from './Components/File';\nimport './App.css';\n\nfunction App() {\n  const [data, updateData] = useState(null);\n  const [breadcrumbData, updateBreadcrumb] = useState(['home']);\n  const BreadcrumbRef = useRef(null);\n  const prevClickedElement = useRef(null);\n\n  useEffect(() => {\n    if (BreadcrumbRef.current !== breadcrumbData) {\n      fetch(`http://127.0.0.1:5000/path/${breadcrumbData.join('/')}`)\n        .then(response => response.json())\n        .then(data => { updateData({ ...data.data })} )\n        .catch(err => console.log('error'));\n    }\n\n    BreadcrumbRef.current = breadcrumbData;\n  }, [breadcrumbData, data]);\n\n  const breadcrumbClickHandler = (event, index) => {\n    const updatedArray = breadcrumbData.splice(index + 1)\n    updateBreadcrumb([...breadcrumbData]);\n  }\n\n  \n  const dirClickHandler = (event, clickedElement) => {   \n      if (prevClickedElement.current !== event.target) {        \n        breadcrumbData.push(clickedElement);\n        updateBreadcrumb([...breadcrumbData]);\n        prevClickedElement.current = event.target;\n      }     \n  }\n\n  let element = data  && data.type === 'dir'? <Directory clickHandler={dirClickHandler} dirName={breadcrumbData[breadcrumbData.length - 1]} dirData ={data.children} />: null;\n\n  if (data && data.type === 'file') {\n    element = <File fileName={breadcrumbData[breadcrumbData.length - 1]} />\n  }\n\n  return (\n    <div className=\"App\">\n      <Breadcrumb clickHandler={breadcrumbClickHandler} rootDir={breadcrumbData[breadcrumbData.length - 1]} breadcrumbData = {breadcrumbData} />\n      {element}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}